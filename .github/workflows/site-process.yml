name: Site Process

on:
  workflow_dispatch:
    inputs:
      site:
        description: Select the site to process
        required: true
        type: choice
        options:
          - immediate-trader.org
          - trackinggate.pro

jobs:
  create-repo:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 'lts/*'
          
      - name: Debug metadata.json
        run: |
          cat templates/${{ github.event.inputs.site }}/metadata.json

      - name: Generate random string for repo name
        id: random_string
        run: |
          echo "RANDOM_STRING=$(node -e 'console.log(Math.random().toString(36).substring(2, 8))')" >> $GITHUB_ENV

      - name: Check if repository exists
        id: check_repo
        run: |
          REPO_NAME="site-${{ github.event.inputs.site }}"
          REPO_EXISTS=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -s "https://api.github.com/user/repos?per_page=100" | \
              jq -r '.[] | select(.name | contains("'$REPO_NAME'")) | .name')

          if [ -z "$REPO_EXISTS" ]; then
            # If repo does not exist, create a new one
            REPO_NAME="${REPO_NAME}-${{ env.RANDOM_STRING }}"
            echo "Creating new repository: $REPO_NAME"
            echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          else
            # If repo exists, use the existing one
            echo "Using existing repository: $REPO_EXISTS"
            echo "REPO_NAME=$REPO_EXISTS" >> $GITHUB_ENV
          fi

      - name: Create GitHub repository (if needed)
        if: steps.check_repo.outputs.REPO_NAME == 'site-${{ github.event.inputs.site }}-${{ env.RANDOM_STRING }}'
        run: |
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -d '{"name": "'"${{ env.REPO_NAME }}"'"}' \
               https://api.github.com/user/repos

      - name: Create new folder and copy contents
        run: |
          mkdir ${{ env.REPO_NAME }}
          cp -r templates/${{ github.event.inputs.site }}/* ${{ env.REPO_NAME }}/
        shell: bash

      - name: Initialize and push to repository
        run: |
          cd ${{ env.REPO_NAME }}
          git init
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git remote add origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository_owner }}/${{ env.REPO_NAME }}.git
          git add .
          git commit -m "Initial commit for ${{ env.REPO_NAME }}"
          git branch -M main
          git push -u origin main

      - name: Extract domain from metadata.json
        id: extract_domain
        run: |
          METADATA_FILE="templates/${{ github.event.inputs.site }}/metadata.json"
          NEW_URL=$(jq -r '.newUrl' $METADATA_FILE)
          echo "NEW_URL=$NEW_URL" >> $GITHUB_ENV

      - name: Set GitHub Pages custom domain
        run: |
          curl -X PATCH \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository_owner }}/${{ env.REPO_NAME }}/pages \
            -d '{"cname": "'"${{ env.NEW_URL }}"'"}'
